initialState = {
  isDrawing: false,
  isEditingPath; null,
  isEditingPaths: false,
  isErasing: false,
  pathColor: '#000000',
  pathLine: 2,
  freezeScreen: false,
  draggingPath: false,
  dragOffsetPath: { x: 0, y: 0 },
  isPathMoving: false,
}

const actions = {
  START_DRAWING: "START_DRAWWING",
  MOVE_PATH: "MOVE_PATH",
  START_ERASE_PATH: "START_ERASE_PATH",
  DELETE_PATH: "DELETE_PATH",
  LINE_COLOR: "LINE_COLOR",
  LINE_WIDTH: "LINE_WIDTH",
  CHANGE_LINE_WIDTH: "CHANGE_LINE_WIDTH",
  CHANGE_LINE_COLOR: "CHANGE_LINE_COLOR",
  STOP_LINE_EDITING: "STOP_LINE_EDITING"
};

//Reducer to Handle Actions
const reducer = (state, action) => {
  switch (action.type) {
    case actions.START_DRAWING:
      return {
        todoList: [
          ...state.todoList,
          {
            id: new Date().valueOf(),
            label: action.todoItemLabel,
            completed: false
          }
        ]
      };
    case actions.REMOVE_TODO_ITEM: {
      const filteredTodoItem = state.todoList.filter(
        (todoItem) => todoItem.id !== action.todoItemId
      );
      return { todoList: filteredTodoItem };
    }
    case actions.TOGGLE_COMPLETED: {
      const updatedTodoList = state.todoList.map((todoItem) =>
        todoItem.id === action.todoItemId
          ? { ...todoItem, completed: !todoItem.completed }
          : todoItem
      );
      return { todoList: updatedTodoList };
    }
    default:
      return state;
  }
};

