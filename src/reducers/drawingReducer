initialState={
    isDrawing:false,
    isEditingPath;null,
    isEditingPaths:false,
    isErasing:false,
    pathColor:'#000000',
    pathLine:2,
    freezeScreen:false,
    draggingPath:false,
    dragOffsetPath:{ x: 0, y: 0 },
    isPathMoving:false,
}

const actions = {
    START_DRAWING: "START_DRAWWING",
    MOVE_PATH: "MOVE_PATH",
    START_ERASE_PATH: "START_ERASE_PATH"
  };

  //Reducer to Handle Actions
const reducer = (state, action) => {
  switch (action.type) {
    case actions.START_DRAWING:
      return {
        todoList: [
          ...state.todoList,
          {
            id: new Date().valueOf(),
            label: action.todoItemLabel,
            completed: false
          }
        ]
      };
    case actions.REMOVE_TODO_ITEM: {
      const filteredTodoItem = state.todoList.filter(
        (todoItem) => todoItem.id !== action.todoItemId
      );
      return { todoList: filteredTodoItem };
    }
    case actions.TOGGLE_COMPLETED: {
      const updatedTodoList = state.todoList.map((todoItem) =>
        todoItem.id === action.todoItemId
          ? { ...todoItem, completed: !todoItem.completed }
          : todoItem
      );
      return { todoList: updatedTodoList };
    }
    default:
      return state;
  }
};


// handleDrawing
// START_DRAWING

// handleMovePath
// MOVE_PATH

// handleEraser
// START_ERASE_PATH

// handleDeletePath
// DELETE_PATH

// handleLineColor
// LINE _COLOR

// handleLineWidth
// LINE_WIDTH

// handleLineWidthChange
// CHANGE_LINE_WIDTH

// handleLineColorChange
// CHANGE_LINE_COLOR

// stopLineEditing
// STOP_LINE_EDITING